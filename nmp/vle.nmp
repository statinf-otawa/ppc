
// common ressources

macro VLE_TEST(n) = \
	if n < 0 then \
		CR[0]<LT..LT> = 1; \
	else \
		if n == 0 then CR[0]<EQ..EQ> = 1; \
		else CR[0]<GT..GT> = 1; \
		endif; \
	endif

macro SCI8(F,SCL,UI8) = \
	switch(SCL) { \
	case 0:		(if F != 0 then 0xffffff00 else 0 endif) | UI8 \
	case 1:		(if F != 0 then 0xffff00ff else 0 endif) | (UI8 << 8) \
	case 2:		(if F != 0 then 0xff00ffff else 0 endif) | (UI8 << 16) \
	default:	(if F != 0 then 0x00ffffff else 0 endif) | (UI8 << 24) \
	}

macro VLE_OFFSET(n) = \
	(n) + 1


macro VLE_CHECK_CARRY(res, op1, op2)= \
	if (op1 >= 0 && op2 >= 0) then \
		XER <CA_XER..CA_XER> = 0; \
	else \
		if (op1 < 0 && op2 < 0) then \
			XER <CA_XER..CA_XER> = 1; \
		else \
			if (res >= 0) then \
				XER <CA_XER..CA_XER> = 1; \
			else \
				XER <CA_XER..CA_XER> = 0; \
			endif; \
		endif; \
	endif;

macro VLE_DOT(Rc) = (if Rc == 0 then "" else "." endif)

var IMM[1, word]


// ===== VLE 16-bits ======

op vle16_list =
	se_add	|
	se_addi	|
	se_and
	

macro vle_index(i) = \
	if i < 8 then i else i + 16 endif

mode vle_idx(idx: card(4)) = GPR[vle_index(idx)]
	syntax = format("r%d", vle_index(idx))
	image = format("%4b", idx)
	index = vle_index(idx)

op se_add(rx: vle_idx, ry: vle_idx)
	syntax = format("se_add %s,%s", rx.syntax, ry.syntax)
	image = format("000001 00 %s %s", rx.image, ry.image)
	action = { rx = rx + ry; }

op se_addi(OIM5: card(5), RX: vle_idx)
	syntax = format("se_addi %s, %d", RX.syntax, VLE_OFFSET(OIM5))
	image = format("001000 0 %5b %s", OIM5, RX.image)
	action = { RX = RX + VLE_OFFSET(OIM5); }

op se_and(Rc: bit, Rx: vle_idx, Ry: vle_idx)
	syntax = format("e_and%s %s, %s ", VLE_DOT(Rc), Rx.syntax, Ry.syntax)
	image = format("010001 1 %1b %s %s", Rc, Rx.image, Ry.image)
	action = {
		TMP_WORD = Rx & Ry;
		if Rc then VLE_TEST(TMP_WORD); endif;
		Rx = TMP_WORD;
	}
	

// ====== VLE 32-bits ======

mode vle32_idx(idx: card(5)) = GPR[idx]
	syntax = format("r%d", idx)
	image = format("%5b", idx)
	index = idx

op vle32_list =
	e_add16i	|
	e_add2i_	|
	e_add2is	|
	e_addi		|
	e_addic		|
	e_and2i_	|
	e_and2is_	|
	e_andi

op e_add16i(rD: vle32_idx, rA: vle32_idx, SI: int(16))
	syntax = format("e_add16i %s, %s, %d", rD.syntax, rA.syntax, SI)
	image = format("000111 %s %s %16b", rD.image, rA.image, SI)
	action = { rD = rA + SI; }

op e_add2i_(rA: vle32_idx, SI: int(16))
	syntax = format("e_add2i. %s, %d",  rA.syntax, SI)
	image = format("011100 %5b %s 10001 %11b", SI<15..11>, rA.image, SI<10..0>)
	action = { TMP_WORD = rA + SI; VLE_TEST(TMP_WORD); rA = TMP_WORD; } 
	
op e_add2is(rA: vle32_idx, SI: int(16))
	syntax = format("e_add2is %s, %d", rA.syntax, SI)
	image = format("011100 %5b %s 10010 %11b", SI<15..11>, rA.image, SI<10..0>)
	action = { rA = rA + (coerce(long, SI) << 16); }

op e_addi(rD: vle32_idx, rA: vle32_idx, Rc: bit, F: bit, SCL: card(2), UI8: card(8))
	syntax = format("e_addi%s %s, %s, %d", VLE_DOT(Rc), rD.syntax, rA.syntax, SCI8(F, SCL, UI8))
	image = format("000110 %s %s 1000 %1b %1b %2b %8b", rD.image, rA.image, Rc, F, SCL, UI8)
	action = {
		TMP_WORD = rA + SCI8(F, SCL, UI8);
		if Rc then VLE_TEST(TMP_WORD); endif;
		rD = TMP_WORD;
	}

op e_addic(rD: vle32_idx, rA: vle32_idx, Rc: bit, F: bit, SCL: card(2), UI8: card(8))
	syntax = format("e_addic%s %s, %s, %d", VLE_DOT(Rc), rD.syntax, rA.syntax, SCI8(F, SCL, UI8))
	image = format("000110 %s %s 1001 %1b %1b %2b %8b", rD.image, rA.image, Rc, F, SCL, UI8)
	action = {
		IMM = SCI8(F, SCL, UI8);
		TMP_WORD = rA + IMM;
		VLE_CHECK_CARRY(TMP_WORD, rA, IMM);
		if Rc then VLE_TEST(TMP_WORD); endif;
		rD = TMP_WORD;
	}

op e_and2i_(rD: vle32_idx, UI: card(16))
	syntax = format("e_and2i. %s, %d", rD.syntax, UI)
	image = format("011100 %s %5b 11001 %11b", rD.image, UI<15..11>, UI<10..0>)
	action = {
		TMP_WORD = rD & (UI<11..0>);
		VLE_TEST(TMP_WORD);
		rD = TMP_WORD;
	}

op e_and2is_(rD: vle32_idx, UI: card(16))
	syntax = format("e_and2is. %s, %d", rD.syntax, UI)
	image = format("011100 %s %5b 11101 %11b", rD.image, UI<15..11>, UI<10..0>)
	action = {
		TMP_WORD = rD & (coerce(word, UI<11..0>) << 16);
		VLE_TEST(TMP_WORD);
		rD = TMP_WORD;
	}

op e_andi(rS: vle32_idx, rA: vle32_idx, Rc: bit, F: bit, SCL: card(2), UI8: card(8))
	syntax = format("e_addic%s %s, %s, %d", VLE_DOT(Rc), rS.syntax, rA.syntax, SCI8(F, SCL, UI8))
	image = format("000110 %s %s 1100 %1b %1b %2b %8b", rS.image, rA.image, Rc, F, SCL, UI8)
	action = {
		IMM = SCI8(F, SCL, UI8);
		TMP_WORD = rS + IMM;
		if Rc then VLE_TEST(TMP_WORD); endif;
		rA = TMP_WORD;
	}
