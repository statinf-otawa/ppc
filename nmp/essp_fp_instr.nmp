// embedded scalar single-precision floating-pont instructions


// SPE state
reg SPEFSCR [ 1 , long ]

// SPE Status and Control Register 

let FP_FRMC_TONEAREST = 0
let FP_FRMC_TOWARDZERO =1
let FP_FRMC_UPWARD =2
let FP_FRMC_DOWNWARD =3
let FP_SOVH  = 31
let FP_OVH   = 30
let FP_FGH   = 29
let FP_FXH   = 28
let FP_FINVH = 27
let FP_FDBZH = 26
let FP_FUNFH = 25
let FP_FOVFH = 24
let FP_FINXS = 21
let FP_FINVS = 20
let FP_FDBZS = 19
let FP_FUNFS = 18
let FP_FOVFS = 17
let FP_MODE  = 16
let FP_SOV   = 15
let FP_OV    = 14
let FP_FG    = 13
let FP_FX    = 12
let FP_FINV  = 11
let FP_FDBZ  = 10
let FP_FUNF  = 9
let FP_FOVF  = 8
let FP_FINXE = 6
let FP_FINVE = 5
let FP_FDBZE = 4
let FP_FUNFE = 3
let FP_FOVFE = 2


let EFPARITH = IS_ALU | IS_FLOAT    // Floating-Point Arithmetic Instructions
let EFPMUL = IS_ALU | IS_MUL | IS_FLOAT 
let EFPDIV = IS_ALU | IS_DIV | IS_FLOAT 
let EFPRC = IS_ALU | IS_FLOAT | IS_INT // FP rounding and convert
let EFPCMP = IS_ALU | IS_FLOAT  // FP compare


var TMP_FLOT32    [ 1 , flots ]
var TMP_FLOAT32_A [ 1 , flots ]
var TMP_FLOAT32_B [ 1 , flots ]


//SPE values

macro FP_PMAX  =0x7f7fffff \
macro FP_PMIN  =0x00800000 \




// macros


macro FP_SIGN32(x) = \
	x<31..31> \

macro FP_EXP32(x) = \
	x<30..23> \

macro FP_FRAC32(x) = \
	x<22..0> \

macro isNAN32(x) = \
	( FP_EXP32(x) == 255 && FP_FRAC32(x) != 0 ) \

macro isSNAN32(x) = \
	( isNAN32(x) && x <22..22> == 0 ) \

macro isQNAN32(x) = \
	( isNAN32(x) && x <22..22> == 1 ) \

macro isZERO32(x) = \
	( FP_SIGN32(x) == 0 && FP_EXP32(x) == 0 && FP_FRAC32(x) == 0 ) \

macro isMZERO32(x) = \
	( FP_SIGN32(x) == 1 && FP_EXP32(x) == 0 && FP_FRAC32(x) == 0 ) \

macro isINF32(x) = \
	( FP_SIGN32(x) == 0 && FP_EXP32(x) == 255 && FP_FRAC32(x) == 0 ) \

macro isMINF32(x) = \
	( FP_SIGN32(x) == 1 && FP_EXP32(x) == 255 && FP_FRAC32(x) == 0 ) \

macro isNORM32(x) = \
	( FP_SIGN32(x) == 0 && FP_EXP32(x) > 0 && FP_EXP32(x) < 255 ) \

macro isMNORM32(x) = \
	( FP_SIGN32(x) == 1 && FP_EXP32(x) > 0 && FP_EXP32(x) < 255 ) \

macro isDNORM32(x) = \
	( FP_SIGN32(x) == 0 && FP_EXP32(x) == 0 && FP_FRAC32(x) != 0 ) \

macro isMDNORM32(x) = \
	( FP_SIGN32(x) == 1 && FP_EXP32(x) == 0 && FP_FRAC32(x) != 0 ) \

//rounding mode \
macro FP_FRMC = \
	SPEFSCR < 1..0 > \
	
macro setSPEFSCR(x) = \
	SPEFSCR <x..x> = 1 \

macro clearSPEFSCR(x) = \
	SPEFSCR <x..x> = 0 \
	
	
macro FP_UPDATE_FLAGS = \
	if "fpi_testexcept"(@"FPI_INEXACT") then \
		setSPEFSCR(FP_FINV); \
	endif; \
	if "fpi_testexcept"(@"FPI_DIVBYZERO") then \
		setSPEFSCR(FP_FINV); \
	endif; \
	if "fpi_testexcept"(@"FPI_INVALID") then \
		setSPEFSCR(FP_FINV); \
	endif; \
	if "fpi_testexcept"(@"FPI_UNDERFLOW") then \
		setSPEFSCR(FP_FUNF); \
	endif; \
	if "fpi_testexcept"(@"FPI_INVALID") then \
		setSPEFSCR(FP_FINV); \
	endif; \
	if "fpi_testexcept"(@"FPI_OVERFLOW") then \
		setSPEFSCR(FP_FOVF); \
	endif; \
	
macro EXCEPTION32 = \
	(((SPEFSCR<FP_FINV..FP_FINV>) && (SPEFSCR<FP_FINVE..FP_FINVE>)) || \
	 ((SPEFSCR<FP_FUNF..FP_FUNF>) && (SPEFSCR<FP_FUNFE..FP_FUNFE>)) || \
	 ((SPEFSCR<FP_FOVF..FP_FOVF>) && (SPEFSCR<FP_FOVFE..FP_FOVFE>)) )  \
	
macro EFS_SET_RESULT32(freg, result) = \
	FP_UPDATE_FLAGS; \
	if !(EXCEPTION32 && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then \
		GPR[freg] = result<31..0>; \
	else \
		if((SPEFSCR<FP_FOVF..FP_FOVF>) && (SPEFSCR<FP_FOVFE..FP_FOVFE>)) then \
			GPR[freg] = FP_PMAX; \
		else \
			if((SPEFSCR<FP_FUNF..FP_FUNF>) && (SPEFSCR<FP_FUNFE..FP_FUNFE>)) then \
				GPR[freg] = 0; \
			endif; \
		endif; \
	endif; \

// ========================================================================= //
//  2. Instructions                                                          //
// ========================================================================= //

op essp_fp_instr ( x: essp_fp_instr_action )
	syntax = x.syntax
	image  = x.image
	action = {
		if MSR<MSR_FP..MSR_FP> then
			x.action;
		else
			"launch_exception"("instr",FP_UNAVAIL); //launch_exception extern function
		endif;
		}
	otawa_kind = x.otawa_kind
	
//op essp_fp_instr_action = essp_fp_instr   // arithmetic instructions

//op essp_fp_instr ( x : essp_fp_action )
//  syntax = x.syntax
//   image  = x.image
//   action = { x.action; }
//   otawa_kind = x.otawa_kind

op essp_fp_instr_action =   efsarithmetic
                      | efscompare
                      | efsconvert
                      
op efsarithmetic =   efsadd
                    | efssub
                    | efsmul
                    | efsdiv
                    
                    
                    

op efsadd ( frd : index, fra : index, frb : index )
   syntax = format ( "efsadd fr%d,fr%d,fr%d", frd, fra, frb )
   image  = format ( "000100%5b%5b%5b01011000000", frd, fra, frb )
   action = {
		// indique le mode arrondi ........................
		// ras les flags ..................................
		
		TMP_FLOAT32_A<31..0> = GPR [ fra ];
        TMP_FLOAT32_B<31..0> = GPR [ frb ];

		if isNAN32(TMP_FLOAT32_A)||isINF32(TMP_FLOAT32_A)||isMINF32(TMP_FLOAT32_A) then // if RA is NaN or infinity
		    if (FP_SIGN32(TMP_FLOAT32_A)==0) then
				TMP_FLOT32<31..0> = FP_PMAX;
			else
				TMP_FLOT32<31..0> = FP_PMAX;
				FP_SIGN32(TMP_FLOT32)=1;
			endif;
		else 
			if isNAN32(TMP_FLOAT32_B)||isINF32(TMP_FLOAT32_B)||isMINF32(TMP_FLOAT32_B) then // if RB is NaN or infinity
				if (FP_SIGN32(TMP_FLOAT32_B)==0) then
					TMP_FLOT32<31..0> = FP_PMAX;
				else
					TMP_FLOT32<31..0> = FP_PMAX;
					FP_SIGN32(TMP_FLOT32)=1;
				endif;
			else
				TMP_FLOT32 = TMP_FLOAT32_B + TMP_FLOAT32_B;
			endif;
		endif;
			
		EFS_SET_RESULT32(frd, TMP_FLOT32); 
		 
		if EXCEPTION32 then
			"launch_exception"("instr",PROGRAM);
		endif;
		}
		otawa_kind = EFPARITH     




op efssub ( frd : index, fra : index, frb : index )
   syntax = format ( "efssub fr%d,fr%d,fr%d", frd, fra, frb )
   image  = format ( "000100%5b%5b%5b01011000001", frd, fra, frb )
   action = {
		// indique le mode arrondi ........................
		// ras les flags ..................................
		
		TMP_FLOAT32_A<31..0> = GPR [ fra ];
        TMP_FLOAT32_B<31..0> = GPR [ frb ];

		if isNAN32(TMP_FLOAT32_A)||isINF32(TMP_FLOAT32_A)||isMINF32(TMP_FLOAT32_A) then // if RA is NaN or infinity
		    if (FP_SIGN32(TMP_FLOAT32_A)==0) then
				TMP_FLOT32<31..0> = FP_PMAX;
			else
				TMP_FLOT32<31..0> = FP_PMAX;
				FP_SIGN32(TMP_FLOT32)=1;
			endif;
		else 
			if isNAN32(TMP_FLOAT32_B)||isINF32(TMP_FLOAT32_B)||isMINF32(TMP_FLOAT32_B) then // if RB is NaN or infinity
				if (FP_SIGN32(TMP_FLOAT32_B)==0) then
					TMP_FLOT32<31..0> = FP_PMAX;
				else
					TMP_FLOT32<31..0> = FP_PMAX;
					FP_SIGN32(TMP_FLOT32)=1;
				endif;
			else
				TMP_FLOT32 = TMP_FLOAT32_B - TMP_FLOAT32_B;
			endif;
		endif;	
		EFS_SET_RESULT32(frd, TMP_FLOT32); 
		 
		if EXCEPTION32 then
			"launch_exception"("instr",PROGRAM);
		endif;
		}
		otawa_kind = EFPARITH    
		
		
		
		
		
		
op efsmul ( frd : index, fra : index, frb : index )
   syntax = format ( "efsmul fr%d,fr%d,fr%d", frd, fra, frb )
   image  = format ( "000100%5b%5b%5b01011001000", frd, fra, frb )
   action = {
		// indique le mode arrondi ........................
		// ras les flags ..................................
		
		TMP_FLOAT32_A<31..0> = GPR [ fra ];
        TMP_FLOAT32_B<31..0> = GPR [ frb ];

		if isNAN32(TMP_FLOAT32_A)||isINF32(TMP_FLOAT32_A)||isMINF32(TMP_FLOAT32_A) then // if RA is NaN or infinity
		    if (FP_SIGN32(TMP_FLOAT32_A)==0) then
				TMP_FLOT32<31..0> = FP_PMAX;
			else
				TMP_FLOT32<31..0> = FP_PMAX;
				FP_SIGN32(TMP_FLOT32)=1;
			endif;
		else 
			if isNAN32(TMP_FLOAT32_B)||isINF32(TMP_FLOAT32_B)||isMINF32(TMP_FLOAT32_B) then // if RB is NaN or infinity
				if (FP_SIGN32(TMP_FLOAT32_B)==0) then
					TMP_FLOT32<31..0> = FP_PMAX;
				else
					TMP_FLOT32<31..0> = FP_PMAX;
					FP_SIGN32(TMP_FLOT32)=1;
				endif;
			else
				TMP_FLOT32 = TMP_FLOAT32_B * TMP_FLOAT32_B;
			endif;
		endif;
			
		EFS_SET_RESULT32(frd, TMP_FLOT32); 
		 
		if EXCEPTION32 then
			"launch_exception"("instr",PROGRAM);
		endif;
		}
		otawa_kind = EFPMUL   
		
		
		

op efsdiv ( frd : index, fra : index, frb : index )
   syntax = format ( "efsdiv fr%d,fr%d,fr%d", frd, fra, frb )
   image  = format ( "000100%5b%5b%5b01011001001", frd, fra, frb )
   action = {
		// indique le mode arrondi ........................
		// ras les flags ..................................

		TMP_FLOAT32_A<31..0> = GPR [ fra ];
        TMP_FLOAT32_B<31..0> = GPR [ frb ];

		if isNAN32(TMP_FLOAT32_A)||isINF32(TMP_FLOAT32_A)||isMINF32(TMP_FLOAT32_A) then // if RA is NaN or infinity
		    if (FP_SIGN32(TMP_FLOAT32_A)==0) then
				TMP_FLOT32<31..0> = FP_PMAX;
			else
				TMP_FLOT32<31..0> = FP_PMAX;
				FP_SIGN32(TMP_FLOT32)=1;
			endif;
		else
			if isNAN32(TMP_FLOAT32_B)||isINF32(TMP_FLOAT32_B)||isMINF32(TMP_FLOAT32_B) then // if RB is NaN or infinity
				if (FP_SIGN32(TMP_FLOAT32_B)==0) then
					TMP_FLOT32<31..0> = FP_PMAX;
				else
					TMP_FLOT32<31..0> = FP_PMAX;
					FP_SIGN32(TMP_FLOT32)=1;
				endif;
			else
				TMP_FLOT32 = TMP_FLOAT32_B / TMP_FLOAT32_B;
			endif;
		endif;
		EFS_SET_RESULT32(frd, TMP_FLOT32); 
		 
		if EXCEPTION32 then
			"launch_exception"("instr",PROGRAM);
		endif;
		}
		otawa_kind = EFPDIV   
		
		
		
op efscompare =   efscmpgt
                    | efscmpeq
                    | efscmplt
                    
                    
op efscmpgt ( crfd : card ( 3 ), fra : index, frb : index )
   syntax = format ( "efscmpgt crf%d,fr%d,fr%d", crfd, fra, frb )
   image  = format ( "000100%3b00%5b%5b01011001100", crfd, fra, frb )
   action = {
		TMP_FLOAT32_A<31..0> = GPR [ fra ];
        TMP_FLOAT32_B<31..0> = GPR [ frb ];
        if TMP_FLOAT32_A > TMP_FLOAT32_B then
			TMP_BYTE = 0b0100;
		else
			TMP_BYTE = 0b0000;
        endif;
        CR[(7-crfd)] < LT..SO > = TMP_BYTE <3..0>;
		//FP_UPDATE_FLAGS; 
		if isNAN32(TMP_FLOAT32_A)||isINF32(TMP_FLOAT32_A)||isMINF32(TMP_FLOAT32_A)||isMDNORM32(TMP_FLOAT32_A)||isDNORM32(TMP_FLOAT32_A)|| 
		   isNAN32(TMP_FLOAT32_B)||isINF32(TMP_FLOAT32_B)||isMINF32(TMP_FLOAT32_B)||isMDNORM32(TMP_FLOAT32_B)||isDNORM32(TMP_FLOAT32_B) then
			setSPEFSCR(FP_FINV);
			clearSPEFSCR(FP_FGH);
			clearSPEFSCR(FP_FXH);
			clearSPEFSCR(FP_FG);
			clearSPEFSCR(FP_FX);
		endif;
		if EXCEPTION32 then
			"launch_exception"("instr",PROGRAM);
		endif;
		}
		otawa_kind = EFPCMP


op efscmpeq ( crfd : card ( 3 ), fra : index, frb : index )
   syntax = format ( "efscmpeq crf%d,fr%d,fr%d", crfd, fra, frb )
   image  = format ( "000100%3b00%5b%5b01011001110", crfd, fra, frb )
   action = {
		TMP_FLOAT32_A<31..0> = GPR [ fra ];
        TMP_FLOAT32_B<31..0> = GPR [ frb ];
        if TMP_FLOAT32_A == TMP_FLOAT32_B then
			TMP_BYTE = 0b0100;
		else
			TMP_BYTE = 0b0000;
        endif;
        CR[(7-crfd)] < LT..SO > = TMP_BYTE <3..0>;
		//FP_UPDATE_FLAGS; 
		if isNAN32(TMP_FLOAT32_A)||isINF32(TMP_FLOAT32_A)||isMINF32(TMP_FLOAT32_A)||isMDNORM32(TMP_FLOAT32_A)||isDNORM32(TMP_FLOAT32_A)|| 
		   isNAN32(TMP_FLOAT32_B)||isINF32(TMP_FLOAT32_B)||isMINF32(TMP_FLOAT32_B)||isMDNORM32(TMP_FLOAT32_B)||isDNORM32(TMP_FLOAT32_B) then
			setSPEFSCR(FP_FINV);
			clearSPEFSCR(FP_FGH);
			clearSPEFSCR(FP_FXH);
			clearSPEFSCR(FP_FG);
			clearSPEFSCR(FP_FX);
		endif;
		if EXCEPTION32 then
			"launch_exception"("instr",PROGRAM);
		endif;
		}
		otawa_kind = EFPCMP
		
op efscmplt ( crfd : card ( 3 ), fra : index, frb : index )
   syntax = format ( "efscmplt crf%d,fr%d,fr%d", crfd, fra, frb )
   image  = format ( "000100%3b00%5b%5b01011001101", crfd, fra, frb )
   action = {
		TMP_FLOAT32_A<31..0> = GPR [ fra ];
        TMP_FLOAT32_B<31..0> = GPR [ frb ];
        if TMP_FLOAT32_A < TMP_FLOAT32_B then
			TMP_BYTE = 0b0100;
		else
			TMP_BYTE = 0b0000;
        endif;
        CR[(7-crfd)] < LT..SO > = TMP_BYTE <3..0>;
		//FP_UPDATE_FLAGS; 
		if isNAN32(TMP_FLOAT32_A)||isINF32(TMP_FLOAT32_A)||isMINF32(TMP_FLOAT32_A)||isMDNORM32(TMP_FLOAT32_A)||isDNORM32(TMP_FLOAT32_A)|| 
		   isNAN32(TMP_FLOAT32_B)||isINF32(TMP_FLOAT32_B)||isMINF32(TMP_FLOAT32_B)||isMDNORM32(TMP_FLOAT32_B)||isDNORM32(TMP_FLOAT32_B) then
			setSPEFSCR(FP_FINV);
			clearSPEFSCR(FP_FGH);
			clearSPEFSCR(FP_FXH);
			clearSPEFSCR(FP_FG);
			clearSPEFSCR(FP_FX);
		endif;
		if EXCEPTION32 then
			"launch_exception"("instr",PROGRAM);
		endif;
		}
		otawa_kind = EFPRC
            
op efsconvert =   efscfui
                    | efsctuiz    
                    
op efscfui ( frd : index, frb : index )
   syntax = format ( "efscfui fr%d,fr%d", frd, frb )
   image  = format ( "000100%5b00000%5b01011010000", frd, frb )
   action = {
		GPR[frd] = coerce (flots,GPR [ frb ])<31..0>;
   }
   otawa_kind = EFPCMP
   
   
   
   op efsctuiz ( frd : index, frb : index )
   syntax = format ( "efsctuiz fr%d,fr%d", frd, frb )
   image  = format ( "000100%5b00000%5b01011011000", frd, frb )
   action = {
        TMP_FLOAT32_B<31..0> = GPR [ frb ];
        if isMDNORM32(TMP_FLOAT32_B)||isDNORM32(TMP_FLOAT32_B)||isZERO32(TMP_FLOAT32_B)||isMZERO32(TMP_FLOAT32_B)|| 
           isMNORM32(TMP_FLOAT32_B)||isNAN32(TMP_FLOAT32_B) then
			GPR [ frd ]=0;
		else 
			if  FP_EXP32(TMP_FLOAT32_B)<=158 then
				GPR [ frd ]= coerce (word,TMP_FLOAT32_B);
			endif;
		endif;
		if isNAN32(TMP_FLOAT32_A)||isINF32(TMP_FLOAT32_A)||isMINF32(TMP_FLOAT32_A)||isMDNORM32(TMP_FLOAT32_A)||isDNORM32(TMP_FLOAT32_A)|| 
		   isNAN32(TMP_FLOAT32_B)||isINF32(TMP_FLOAT32_B)||isMINF32(TMP_FLOAT32_B)||isMDNORM32(TMP_FLOAT32_B)||isDNORM32(TMP_FLOAT32_B) then
			setSPEFSCR(FP_FINV);
			clearSPEFSCR(FP_FGH);
			clearSPEFSCR(FP_FXH);
			clearSPEFSCR(FP_FG);
			clearSPEFSCR(FP_FX);
		endif;
		if EXCEPTION32 then
			"launch_exception"("instr",PROGRAM);
		endif;
	}
	otawa_kind = EFPRC                          
